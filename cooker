#!/bin/bash
. options.conf
. flavors.conf
[ ! -d "$tmp_dir" ] && mkdir -p "$tmp_dir"
[ ! -d "$downloads_dir" ] && mkdir -p "$downloads_dir"
[ ! -d "$bin_output" ] && mkdir -p "$bin_output"
[ ! -d "$files_dir" ] && mkdir -p "$files_dir"
J=${J:-$make_j}

usage() {
    echo "Usage: $0 [-f ] [-d <target>] [-b <target> [--no-update]] [--download-all|build-all|update-feeds]"
    echo "          [--targets|flavors|profiles=<target>] [-c <target> [--profile=<profile>] [--flavor=<flavor>]]"
    echo ""
    echo "    --download-all            : download all SDK and ImageBuilders"
    echo "    --build-all	              : build SDK for all available tagets"
    echo "    --cook-all	              : cook firmwares for all available targets (TBD)"
    echo "    --targets                 : list all officialy supported targets"
    echo "    --profiles=<target>       : list available hardware profiles for a specific target"
    echo "    --profile=<profile>       : use <profile> when cooking firmware (default is all available target profiles)"
    echo "    --flavors                 : list available LibreMesh flavors for cooking"
    echo "    --flavor=<flavor>         : use <flavor> when cooking firmware (default generic)"
    echo "    --update-feeds            : update previously downloaded feeds (only works for Git feeds)"
    echo "    --no-update               : do not update feeds when building SDK"
    echo "    -f                        : download feeds based on feeds.conf.default file. Feeds will be shared among all targets"
    echo "    -b <target>               : build specific target SDK"
    echo "    -d <target>               : download SDK and IB for specific target"
    echo "    -c <target>               : cook the firmware for specific target. Can be used with --profile and --flavor"
    echo ""
    echo "Example of usage for building SDK and cooking firmware for target tl-wdr3500-v1 (all in one)"
    echo ""
    echo "    $0 -c ar71xx/generic --flavor=generic --profile=tl-wdr3500-v1"
    echo ""
    echo "Example of usage for building SDK and cooking ar71xx target with all available profiles (step by step)"
    echo ""
    echo "    $0 -d ar71xx/generic"
    echo "    $0 -f"
    echo "    $0 -b ar71xx/generic"
    echo "    $0 -c ar71xx/generic --flavor=generic"
    echo ""
    echo "Variable PKG can be used to add extra packages when cooking. Also J to parallelize and V to verbose"
    echo ""
    echo "    PKG=\"luci-app-3g iperf\" J=2 V=s $0 -c ar71xx/generic"
    echo ""
}

list_targets() {
    cat $targets_list
}

cook() {
    local target="$1"
    local profile="$2"
    local flavor="$3"
    local ib="$release/$target/ib"
    local output_dir="$PWD/$bin_output/$target/$profile/$flavor"

    [ ! -d "$ib" ] || ! grep -q \#\#SDK_repo $ib/repositories.conf && {
        echo "-> ImageBuilder for target $target not rady"
        build_packets $target
    }
    [ ! -d "$output_dir" ] && mkdir -p $output_dir
    local ib_files=""
    find $PWD/$files_dir/* 2>/dev/null && ib_files="FILES=$PWD/$files_dir" # if files/ directory is empty, IB crashes
    make -C $ib image PROFILE="$profile" PACKAGES="${!flavor} $PKG" EXTRA_IMAGE_NAME="libremesh" BIN_DIR="$output_dir" $ib_files && {
      echo ""
      echo "-> Firmware for target $target, profile $profile and flavor $flavor cooked! Find the binaries in $output_dir directory" || {
      echo ""
      echo "-> Firmware not cooked, something wrong on the ImageBuilder compilation process" 
      }
    }
}

build_packets() {
    local target="$1"
    local sdk="$release/$target/sdk"
    local ib="$release/$target/ib"

    [ ! -d "$sdk" ] && {
        echo "-> SDK for target $target not found"
        download_sdk_ib $target
    }
    
    echo "-> Building $sdk"
    
    [ -f "$feeds_file" ] || { 
        echo "-> Local feeds file not found"
        download_feeds
    }
    cp -f "$feeds_file" "$sdk/feeds.conf"
    [ -z "$no_update" ] && (cd $sdk && scripts/feeds update -a)

    for r in $sdk_install_repos; do
        (cd $sdk && scripts/feeds install -p $r -a)
    done
    for p in $sdk_install_packages; do
        (cd $sdk && scripts/feeds install $p)
    done

    cp $sdk_config $sdk/.config
    make -C $sdk defconfig
    make -j$J -C $sdk V=$V && {
        grep -q \#\#SDK_repos $ib/repositories.conf || {
          cat $ib/repositories.conf > $tmp_dir/repositories.conf
          echo "-> Linking IB with SDK"
          echo "" >> $tmp_dir/repositories.conf
          echo "##SDK_repos" >> $tmp_dir/repositories.conf
          # TODO: check if it works for all platforms. Are the same dir names used?
          for r in $PWD/$sdk/bin/packages/*/*; do
            echo "src sdk_$(basename $r) file:$r" >> $tmp_dir/repositories.conf
          done
          echo "src sdk_target file:$(find $PWD/$sdk/bin/targets -type d -name packages)" >> $tmp_dir/repositories.conf
          echo "" >> $tmp_dir/repositories.conf
          cp -f $tmp_dir/repositories.conf $ib/repositories.conf
          echo "-> Using custom $tmp_dir/repositories.conf"
        }
    } || echo "-> Error compiling SDK"
}

download_feeds() {
    local feeds_template="$feeds_default_file"
    local output="$feeds_dir"
    rm -f $feeds_file
    [ ! -d "$output" ] && mkdir -p "$output"
    echo "-> Downloading feeds into $output/"
    
    cat $feeds_template | grep ^src-git | while read feed; do
        name="$(echo $feed | awk '{print $2}')"
        full_url="$(echo $feed | awk '{print $3}')"
        [ -d $output/$name ] && rm -rf $output/$name
        if echo "$full_url" | grep \;; then
            url="$(echo $full_url | awk -F\; '{print $1}')"
            branch="$(echo $full_url | awk -F\; '{print $2}')"
            git clone $url -b $branch $output/$name
        elif echo "$full_url" | grep \^; then
            url="$(echo $full_url | awk -F\^ '{print $1}')"
            commit="$(echo $full_url | awk -F\^ '{print $2}')"
            git clone $url $output/$name
            ( cd $output/$name && git checkout $commit )
        fi
        echo "src-link $name $PWD/$output/$name" >> $feeds_file
    done
}

update_feeds() {
    for f in $feeds_dir/*; do
        [ -d $f/.git ] && (cd $f && git pull)
    done
}

build_all_sdk() {
    cat $targets_list | while read t; do build_packets $t; done
}

download_all() {
    cat $targets_list | while read t; do download_sdk_ib $t; done
}

download_sdk_ib() {
    local target="$1"
    [ -z "$target" ] && {
        echo "-> You must specify target to download, check $targets_list file"
        usage
        exit 1
    }
    local url="$base_url/$target"
    local output="$release/$target"
    [ ! -d "$output" ] && mkdir -p "$output"
    
    local sdk_file="$(wget -q -O- $url | grep lede-sdk | grep href | awk -F\> '{print $4}' | awk -F\< '{print $1}')"
    echo "-> Downloading $url/$sdk_file"
    wget -c "$url/$sdk_file" -O "$tmp_dir/$sdk_file" || {
        echo "-> Error, cannot download SDK $url/$sdk_file"
        exit 1
    }
    tar xf $tmp_dir/$sdk_file -C $output/ && {
        [ -d $output/sdk ] && rm -rf $output/sdk
        mv $output/lede-sdk* $output/sdk
        rm -rf $output/sdk/dl
        local dl=$downloads_dir
        echo $dl | grep -q / || dl="$PWD/$dl"
        ln -s $dl $output/sdk/dl
        #rm -f $TMP/$SDK_FILE
    } || echo "-> Error installing SDK"
    
    local ib_file="$(wget -q -O- $url | grep lede-imagebuilder | grep href | awk -F\> '{print $4}' | awk -F\< '{print $1}')"
    echo "-> Downloading $url/$ib_file"
    wget -c "$url/$ib_file" -O "$tmp_dir/$ib_file" || {
        echo "-> Error, cannot download ImageBuilder $url/$ib_file"
        exit 1
    }
     tar xf $tmp_dir/$ib_file -C $output/ && {
        [ -d $output/ib ] && rm -rf $output/ib
        mv $output/lede-imagebuilder* $output/ib
        rm -rf $output/ib/dl
        local dl=$downloads_dir
        echo $dl | grep -q / || dl="$PWD/$dl"
        ln -s $dl $output/ib/dl
        #rm -f $TMP/$IB_FILE
    } || echo "-> Error installing ImageBuilder"
}

list_flavors() {
    cat flavors.conf | egrep -v "^_" | awk -F= '{print $1}'
}

list_profiles() {
    local target="$1"
    make -C $release/$target/ib info
}

[ -z "$1" ] && usage
OPTS=`getopt -o hd:f:b:c: -l targets,build-all,download-all,profiles:,flavors,profile:,flavor:,update-feeds,no-update -n $0 -- "$@"`
eval set -- "$OPTS"

while true; do
    case $1 in
        --download-all)
            download_all
            break
        ;;
        --build-all)
            build_all_sdk
            break
        ;;
        --targets)
            list_targets
            break
        ;;
      --profiles)
            list_profiles $2
            break
        ;;
      --flavors)
            list_flavors
            break
        ;;
      --update-feeds)
            update_feeds
            break
        ;;
      --no-update)
            no_update=1
            shift
        ;;
        -d)
            download_sdk_ib $2
            break
        ;;
        -f)
            download_feeds
            break
        ;;
        -b)
            build_sdk=1
            target=$2
            shift;shift
        ;;
        -c)
            cook=1
            target="$2"
            shift;shift
        ;;  
        --profile)
            profile="$2"
            shift;shift
        ;;
        --flavor)
            flavor="$2"
            shift;shift
        ;;
        -h)
            usage
            break
        ;;
        --)
            shift
            break
        ;;
        *)
        ;;
    esac
done

[ "$build_sdk" == "1" ] && build_packets $target

[ "$cook" == "1" ] && {
    profile=${profile:-Default}
    flavor=${flavor:-generic}
    cook $target $profile $flavor
}

